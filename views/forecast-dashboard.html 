<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EDI Management System - Forecast</title>
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Simplified Forecast Styles */
        .forecast-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .forecast-header {
            text-align: center;
            margin-bottom: 30px;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .forecast-header h1 {
            margin: 0 0 10px 0;
            font-size: 2.5rem;
        }

        .product-tabs {
            display: flex;
            background: #f8fafc;
            border-bottom: 2px solid #e5e7eb;
            border-radius: 10px 10px 0 0;
            overflow-x: auto;
            margin-bottom: 0;
        }

        .product-tab {
            padding: 15px 25px;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            white-space: nowrap;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
            min-width: 200px;
            text-align: center;
        }

        .product-tab:hover {
            background: #e5e7eb;
        }

        .product-tab.active {
            background: white;
            border-bottom-color: #10b981;
            color: #10b981;
        }

        .product-tab .tab-code {
            display: block;
            font-size: 16px;
            font-weight: 700;
            margin-bottom: 3px;
        }

        .product-tab .tab-name {
            display: block;
            font-size: 12px;
            opacity: 0.7;
        }

        .tab-content {
            display: none;
            background: white;
            border: 1px solid #e5e7eb;
            border-top: none;
            border-radius: 0 0 10px 10px;
            padding: 30px;
            min-height: 500px;
        }

        .tab-content.active {
            display: block;
        }

        .forecast-table {
            width: 100%;
            overflow-x: auto;
            margin-bottom: 30px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border-radius: 12px;
        }

        .forecast-table table {
            width: 100%;
            min-width: 800px;
            font-size: 0.95rem;
            border-collapse: collapse;
            background: white;
        }

        .forecast-table th {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            text-align: center;
            padding: 15px 12px;
            font-weight: 600;
            white-space: nowrap;
        }

        .forecast-table th:first-child {
            background: linear-gradient(135deg, #1f2937 0%, #374151 100%);
            min-width: 120px;
        }

        .forecast-table td {
            padding: 12px;
            border-bottom: 1px solid #e5e7eb;
            text-align: center;
        }

        .forecast-table td:first-child {
            background: #f8fafc;
            font-weight: 700;
            text-align: left;
            color: #374151;
        }

        .forecast-table tr:hover td:not(:first-child) {
            background: #f0fff4;
        }

        .forecast-input {
            width: 100%;
            padding: 10px 12px;
            border: 2px solid #d1d5db;
            border-radius: 6px;
            text-align: center;
            font-size: 16px;
            background: white;
            font-weight: 600;
            transition: all 0.3s ease;
            min-width: 80px;
        }

        .forecast-input:focus {
            outline: none;
            border-color: #10b981;
            box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
            background: #fefefe;
        }

        .forecast-input:disabled {
            background: #f3f4f6;
            color: #6b7280;
            cursor: not-allowed;
        }

        .forecast-input.changed {
            background: #d1fae5;
            border-color: #10b981;
        }

        .month-header {
            text-align: center;
            font-size: 0.9rem;
            line-height: 1.3;
            padding: 15px 8px;
        }

        .month-japanese {
            font-size: 16px;
            font-weight: 700;
            margin-bottom: 4px;
            color: white;
        }

        .month-english {
            font-size: 11px;
            opacity: 0.9;
            color: rgba(255, 255, 255, 0.8);
        }

        .month-date {
            font-size: 10px;
            opacity: 0.8;
            color: rgba(255, 255, 255, 0.7);
            margin-top: 2px;
        }

        .product-summary {
            background: linear-gradient(135deg, #f0fff4 0%, #d1fae5 100%);
            border: 2px solid #10b981;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 25px;
        }

        .product-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .product-details h3 {
            margin: 0;
            color: #1f2937;
            font-size: 1.4rem;
        }

        .product-details p {
            margin: 5px 0 0 0;
            color: #6b7280;
            font-size: 0.95rem;
        }

        .product-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 15px;
        }

        .stat-item {
            text-align: center;
            padding: 15px;
            background: white;
            border-radius: 8px;
            border: 1px solid #10b981;
        }

        .stat-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #10b981;
            margin-bottom: 5px;
        }

        .stat-label {
            color: #6b7280;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .forecast-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-bottom: 25px;
            flex-wrap: wrap;
            background: #f0fff4;
            padding: 20px;
            border-radius: 12px;
            border: 1px solid #10b981;
        }

        .btn {
            padding: 10px 18px;
            border-radius: 8px;
            border: 1px solid;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 0.9rem;
        }

        .btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .btn:disabled {
            cursor: not-allowed;
            transform: none;
            opacity: 0.6;
        }

        .btn-primary {
            background: #10b981;
            border-color: #059669;
            color: white;
        }

        .btn-success {
            background: #3b82f6;
            border-color: #2563eb;
            color: white;
        }

        .btn-warning {
            background: #f59e0b;
            border-color: #d97706;
            color: white;
        }

        .btn-secondary {
            background: #6b7280;
            border-color: #4b5563;
            color: white;
        }

        .save-status {
            margin-left: auto;
            font-size: 0.9rem;
            color: #6b7280;
            font-weight: 500;
        }

        .save-status.saving {
            color: #f59e0b;
        }

        .save-status.saved {
            color: #10b981;
        }

        .save-status.error {
            color: #dc2626;
        }

        .admin-only.disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 40px;
            color: #6b7280;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #10b981;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .message {
            padding: 12px 18px;
            border-radius: 8px;
            margin-bottom: 15px;
            font-weight: 500;
        }

        .message.success {
            background: #d1fae5;
            border: 1px solid #10b981;
            color: #065f46;
        }

        .message.error {
            background: #fee2e2;
            border: 1px solid #ef4444;
            color: #991b1b;
        }

        .message.info {
            background: #dbeafe;
            border: 1px solid #3b82f6;
            color: #1e40af;
        }

        .message.warning {
            background: #fef3c7;
            border: 1px solid #f59e0b;
            color: #92400e;
        }

        @media (max-width: 768px) {
            .product-tabs {
                flex-direction: column;
            }
            
            .product-tab {
                min-width: auto;
                text-align: left;
            }
            
            .forecast-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .product-info {
                flex-direction: column;
                align-items: stretch;
                text-align: center;
            }
            
            .forecast-table th, .forecast-table td {
                padding: 8px 6px;
                font-size: 0.85rem;
            }
            
            .forecast-input {
                padding: 8px 10px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-brand">
            <h2>EDI Management System</h2>
        </div>
        <div class="nav-links">
            <a href="/edi/dashboard">📊 Dashboard</a>
            <a href="/forecast/dashboard" class="active">📈 Forecast</a>
        </div>
        <div class="nav-user">
            <span class="username">Welcome, <span id="current-user">admin</span></span>
            <button class="logout-btn" onclick="logout()">Logout</button>
        </div>
    </nav>

    <div class="forecast-container">
        <div class="forecast-header">
            <h1>📈 Monthly Production Forecast</h1>
            <p>Direct browser input for monthly forecast quantities by product code</p>
        </div>

        <div id="messageContainer"></div>
        <div class="loading" id="loadingIndicator">
            <div class="spinner"></div>
            Loading forecast data...
        </div>

        <!-- Forecast Controls -->
        <div class="forecast-controls">
            <button class="btn btn-primary admin-only" id="saveAllBtn" onclick="saveAllForecasts()">
                💾 Save All Changes
            </button>
            <button class="btn btn-success" id="refreshBtn" onclick="refreshForecastData()">
                🔄 Refresh Data
            </button>
            <button class="btn btn-warning admin-only" onclick="clearAllData()">
                🗑️ Clear All Data
            </button>
            <button class="btn btn-secondary" onclick="showDebugInfo()">
                🔍 Debug Info
            </button>
            <div class="save-status" id="saveStatus">Ready</div>
        </div>

        <!-- Product Tabs -->
        <div class="product-tabs" id="productTabs">
            <!-- Tabs will be generated dynamically -->
        </div>

        <!-- Tab Contents -->
        <div id="tabContents">
            <!-- Tab contents will be generated dynamically -->
        </div>
    </div>

    <script src="/js/main.js"></script>
    <script>
        class SimpleForecastManager {
            constructor() {
                this.currentUser = null;
                this.userPermissions = { canEdit: false, canView: true };
                this.forecastData = {};
                this.changedCells = new Set();
                this.months = [];
                this.activeProductCode = null;
                
                // 7 Product codes with Japanese names
                this.products = [
                    { code: 'PP4166-4681P003', name: 'ｱｯﾊﾟﾌﾞﾚｰﾑ', color: '#e74c3c' },
                    { code: 'PP4166-4681P004', name: 'ｱｯﾊﾟﾌﾞﾚｰﾑ', color: '#c0392b' },
                    { code: 'PP4166-4726P003', name: 'ﾄｯﾌﾟﾌﾟﾚｰﾄ', color: '#2ecc71' },
                    { code: 'PP4166-4726P004', name: 'ﾄｯﾌﾟﾌﾟﾚｰﾄ', color: '#27ae60' },
                    { code: 'PP4166-4731P002', name: 'ﾐﾄﾞﾙﾌﾚｰﾑ', color: '#3498db' },
                    { code: 'PP4166-7106P001', name: 'ﾐﾄﾞﾙﾌﾚｰﾑ', color: '#2980b9' },
                    { code: 'PP4166-7106P003', name: 'ﾐﾄﾞﾙﾌﾚｰﾑ', color: '#1abc9c' }
                ];
            }

            // Generate 12 months starting from current month
            generateMonths() {
                const months = [];
                const now = new Date();
                
                for (let i = 0; i < 12; i++) {
                    const date = new Date(now.getFullYear(), now.getMonth() + i, 1);
                    const year = date.getFullYear();
                    const month = date.getMonth() + 1;
                    
                    const dateKey = `${year}-${String(month).padStart(2, '0')}-01`;
                    
                    const japaneseMonths = ['1月', '2月', '3月', '4月', '5月', '6月', 
                                          '7月', '8月', '9月', '10月', '11月', '12月'];
                    
                    const englishMonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                                         'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                    
                    months.push({
                        key: dateKey,
                        display: japaneseMonths[month - 1],
                        english: englishMonths[month - 1],
                        year: year,
                        month: month,
                        date: date
                    });
                }
                
                this.months = months;
                console.log('📅 Generated months:', months);
                return months;
            }

            async loadUserInfo() {
                try {
                    const response = await fetch('/forecast/api/user-info');
                    if (response.ok) {
                        const userInfo = await response.json();
                        this.currentUser = userInfo;
                        this.userPermissions = userInfo.permissions;
                        
                        this.updateUIForPermissions();
                        document.getElementById('current-user').textContent = userInfo.username;
                        
                        return userInfo;
                    } else {
                        console.log('❌ User not authenticated, redirecting to login');
                        window.location.href = '/';
                        return null;
                    }
                } catch (error) {
                    console.error('Error loading user info:', error);
                    this.showMessage('Failed to load user information', 'error');
                    return null;
                }
            }

            updateUIForPermissions() {
                const adminElements = document.querySelectorAll('.admin-only');

                if (!this.userPermissions.canEdit) {
                    adminElements.forEach(element => {
                        element.classList.add('disabled');
                        if (element.tagName === 'BUTTON') {
                            element.disabled = true;
                        }
                    });
                } else {
                    adminElements.forEach(element => {
                        element.classList.remove('disabled');
                        if (element.tagName === 'BUTTON') {
                            element.disabled = false;
                        }
                    });
                }
            }

            async loadForecastData() {
                try {
                    this.showLoading(true);
                    
                    const response = await fetch('/forecast/api/forecasts');
                    
                    if (response.status === 401) {
                        this.showMessage('Session expired. Please log in again.', 'error');
                        setTimeout(() => window.location.href = '/', 2000);
                        return;
                    }
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    const forecasts = await response.json();
                    console.log('📊 Raw forecast data from API:', forecasts);
                    
                    this.forecastData = {};
                    forecasts.forEach((forecast) => {
                        const key = `${forecast.drawing_number}-${forecast.month_date}`;
                        const quantity = parseInt(forecast.quantity) || 0;
                        this.forecastData[key] = quantity;
                    });
                    
                    console.log('📊 Processed forecast data:', this.forecastData);
                    
                    this.initializeTabs();
                    this.clearChangedCells();
                    
                } catch (error) {
                    this.showMessage('Failed to load forecast data: ' + error.message, 'error');
                    console.error('Error loading forecast data:', error);
                } finally {
                    this.showLoading(false);
                }
            }

            initializeTabs() {
                this.generateMonths();
                
                const tabsContainer = document.getElementById('productTabs');
                const contentsContainer = document.getElementById('tabContents');
                
                tabsContainer.innerHTML = '';
                contentsContainer.innerHTML = '';
                
                this.products.forEach((product, index) => {
                    const tabButton = document.createElement('button');
                    tabButton.className = `product-tab ${index === 0 ? 'active' : ''}`;
                    tabButton.onclick = () => this.switchToProduct(product.code);
                    tabButton.innerHTML = `
                        <span class="tab-code">${product.code}</span>
                        <span class="tab-name">${product.name}</span>
                    `;
                    tabsContainer.appendChild(tabButton);
                    
                    const tabContent = document.createElement('div');
                    tabContent.className = `tab-content ${index === 0 ? 'active' : ''}`;
                    tabContent.id = `tab-${product.code}`;
                    tabContent.innerHTML = this.generateTabContent(product);
                    contentsContainer.appendChild(tabContent);
                    
                    if (index === 0) {
                        this.activeProductCode = product.code;
                    }
                });
                
                this.updateProductSummary(this.activeProductCode);
            }

            generateTabContent(product) {
                return `
                    <div class="product-summary">
                        <div class="product-info">
                            <div class="product-details">
                                <h3>${product.code}</h3>
                                <p>${product.name} - Monthly Forecast Planning</p>
                            </div>
                        </div>
                        <div class="product-stats" id="stats-${product.code}">
                            <div class="stat-item">
                                <div class="stat-number" id="total-${product.code}">0</div>
                                <div class="stat-label">Total Forecast</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number" id="next-month-${product.code}">0</div>
                                <div class="stat-label">Next Month</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number" id="avg-${product.code}">0</div>
                                <div class="stat-label">Monthly Average</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number" id="changes-${product.code}">0</div>
                                <div class="stat-label">Unsaved Changes</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="forecast-table">
                        <table>
                            <thead>
                                <tr>
                                    <th>Forecast Period</th>
                                    ${this.months.map(month => `
                                        <th class="month-header">
                                            <div class="month-japanese">${month.display}</div>
                                            <div class="month-english">${month.english} ${month.year}</div>
                                            <div class="month-date">${month.key}</div>
                                        </th>
                                    `).join('')}
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td><strong>Quantity</strong></td>
                                    ${this.months.map(month => {
                                        const key = `${product.code}-${month.key}`;
                                        const value = this.forecastData[key] || 0;
                                        
                                        return `
                                            <td>
                                                <input type="number" 
                                                       class="forecast-input" 
                                                       value="${value > 0 ? value : ''}"
                                                       data-product="${product.code}"
                                                       data-date="${month.key}"
                                                       data-key="${key}"
                                                       placeholder="0"
                                                       min="0"
                                                       ${!this.userPermissions.canEdit ? 'disabled' : ''}
                                                       onchange="forecastManager.onCellChange(this)"
                                                       onblur="forecastManager.onCellBlur(this)">
                                            </td>
                                        `;
                                    }).join('')}
                                </tr>
                            </tbody>
                        </table>
                    </div>
                `;
            }

            switchToProduct(productCode) {
                document.querySelectorAll('.product-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.querySelector(`[onclick*="${productCode}"]`).classList.add('active');
                
                document.querySelectorAll('.tab-content').forEach(content => {
                    content.classList.remove('active');
                });
                document.getElementById(`tab-${productCode}`).classList.add('active');
                
                this.activeProductCode = productCode;
                this.updateProductSummary(productCode);
            }

            getProductForecastData(productCode) {
                const productData = {};
                this.months.forEach(month => {
                    const key = `${productCode}-${month.key}`;
                    productData[month.key] = this.forecastData[key] || 0;
                });
                return productData;
            }

            updateProductSummary(productCode) {
                const productData = this.getProductForecastData(productCode);
                const values = Object.values(productData);
                
                const total = values.reduce((sum, val) => sum + (val || 0), 0);
                const nextMonth = values[1] || 0;
                const average = total > 0 ? Math.round(total / 12) : 0;
                
                let changes = 0;
                this.changedCells.forEach(key => {
                    if (key.startsWith(productCode + '-')) {
                        changes++;
                    }
                });
                
                const totalEl = document.getElementById(`total-${productCode}`);
                const nextMonthEl = document.getElementById(`next-month-${productCode}`);
                const avgEl = document.getElementById(`avg-${productCode}`);
                const changesEl = document.getElementById(`changes-${productCode}`);
                
                if (totalEl) totalEl.textContent = total.toLocaleString();
                if (nextMonthEl) nextMonthEl.textContent = nextMonth.toLocaleString();
                if (avgEl) avgEl.textContent = average.toLocaleString();
                if (changesEl) changesEl.textContent = changes;
            }

            onCellChange(input) {
                const key = input.dataset.key;
                const productCode = input.dataset.product;
                const value = parseInt(input.value) || 0;
                
                input.classList.add('changed');
                this.changedCells.add(key);
                
                this.forecastData[key] = value;
                
                this.updateProductSummary(productCode);
                this.updateSaveStatus('unsaved', 'Unsaved changes');
            }

            onCellBlur(input) {
                // Optional: Auto-save logic here
            }

            async saveAllForecasts() {
                if (!this.userPermissions.canEdit) {
                    this.showMessage('You do not have permission to save changes', 'error');
                    return;
                }

                if (this.changedCells.size === 0) {
                    this.showMessage('No changes to save', 'warning');
                    return;
                }

                try {
                    this.updateSaveStatus('saving', 'Saving...');
                    this.showLoading(true);
                    
                    const forecasts = [];
                    this.changedCells.forEach(key => {
                        const lastDashIndex = key.lastIndexOf('-');
                        
                        if (lastDashIndex === -1) {
                            console.error(`❌ Invalid key format: ${key}`);
                            return;
                        }
                        
                        const drawingNumber = key.substring(0, lastDashIndex);
                        const monthDate = key.substring(lastDashIndex + 1);
                        
                        forecasts.push({
                            drawing_number: drawingNumber,
                            month_date: monthDate,
                            quantity: this.forecastData[key] || 0
                        });
                    });

                    console.log('💾 Forecast data to save:', forecasts);

                    const response = await fetch('/forecast/api/forecasts/batch', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ forecasts })
                    });

                    const result = await response.json();

                    if (result.success) {
                        this.showMessage(`Saved ${result.saved} forecast entries successfully`, 'success');
                        this.clearChangedCells();
                        this.updateSaveStatus('saved', 'All changes saved');
                        
                        this.products.forEach(product => {
                            this.updateProductSummary(product.code);
                        });
                    } else {
                        this.showMessage(result.error || 'Failed to save forecasts', 'error');
                        this.updateSaveStatus('error', 'Save failed');
                    }
                } catch (error) {
                    this.showMessage('Failed to save forecasts: ' + error.message, 'error');
                    this.updateSaveStatus('error', 'Save failed');
                } finally {
                    this.showLoading(false);
                }
            }

            async clearAllData() {
                if (!this.userPermissions.canEdit) {
                    this.showMessage('You do not have permission to clear data', 'error');
                    return;
                }

                if (!confirm('⚠️ DANGER: This will clear ALL forecast data.\n\nAre you sure?')) {
                    return;
                }

                try {
                    this.showLoading(true);
                    
                    const response = await fetch('/forecast/api/forecasts/clear', {
                        method: 'DELETE'
                    });

                    const result = await response.json();

                    if (result.success) {
                        this.showMessage('All forecast data cleared successfully', 'success');
                        
                        this.forecastData = {};
                        this.clearChangedCells();
                        this.initializeTabs();
                        this.updateSaveStatus('saved', 'Data cleared');
                    } else {
                        this.showMessage(result.error || 'Failed to clear data', 'error');
                    }
                } catch (error) {
                    this.showMessage('Failed to clear data: ' + error.message, 'error');
                } finally {
                    this.showLoading(false);
                }
            }

            async refreshForecastData() {
                try {
                    this.showMessage('Refreshing forecast data...', 'info');
                    await this.loadForecastData();
                    this.showMessage('Forecast data refreshed successfully', 'success');
                } catch (error) {
                    this.showMessage('Failed to refresh data: ' + error.message, 'error');
                }
            }

            clearChangedCells() {
                this.changedCells.clear();
                
                const inputs = document.querySelectorAll('.forecast-input.changed');
                inputs.forEach(input => {
                    input.classList.remove('changed');
                });
            }

            updateSaveStatus(status, message) {
                const saveStatus = document.getElementById('saveStatus');
                if (saveStatus) {
                    saveStatus.textContent = message;
                    saveStatus.className = 'save-status ' + status;
                }
            }

            showLoading(show) {
                const loading = document.getElementById('loadingIndicator');
                if (loading) {
                    loading.style.display = show ? 'block' : 'none';
                }
            }

            showMessage(message, type) {
                const container = document.getElementById('messageContainer');
                if (!container) return;

                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${type}`;
                messageDiv.textContent = message;
                
                container.appendChild(messageDiv);
                
                setTimeout(() => {
                    if (messageDiv.parentNode) {
                        messageDiv.parentNode.removeChild(messageDiv);
                    }
                }, 5000);
            }

            async logout() {
                try {
                    await fetch('/forecast/api/logout', { method: 'POST' });
                    window.location.href = '/';
                } catch (error) {
                    console.error('Logout error:', error);
                    window.location.href = '/';
                }
            }

            async showDebugInfo() {
                console.log('🔍 DEBUG INFO:');
                console.log('📊 Forecast data:', this.forecastData);
                console.log('📅 Months:', this.months);
                console.log('🏷️ Products:', this.products);
                console.log('⚠️ Changed cells:', Array.from(this.changedCells));
                
                alert(`Debug Info:
📊 Forecast entries: ${Object.keys(this.forecastData).length}
📅 Months: ${this.months.length}
🏷️ Products: ${this.products.length}
⚠️ Changed cells: ${this.changedCells.size}
👤 Active product: ${this.activeProductCode}

Check console for detailed logs.`);
            }

            async initialize() {
                try {
                    console.log('🚀 Initializing Simple Forecast Manager...');
                    
                    await this.loadUserInfo();
                    await this.loadForecastData();
                    
                    console.log('✅ Forecast Manager initialized successfully');
                } catch (error) {
                    console.error('❌ Failed to initialize forecast manager:', error);
                    this.showMessage('Failed to initialize forecast manager', 'error');
                }
            }
        }

        // Create global instance
        const forecastManager = new SimpleForecastManager();

        // Global functions
        function saveAllForecasts() {
            forecastManager.saveAllForecasts();
        }

        function clearAllData() {
            forecastManager.clearAllData();
        }

        function refreshForecastData() {
            forecastManager.refreshForecastData();
        }

        function logout() {
            forecastManager.logout();
        }

        function showDebugInfo() {
            forecastManager.showDebugInfo();
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            forecastManager.initialize();
        });
    </script>
</body>
</html>